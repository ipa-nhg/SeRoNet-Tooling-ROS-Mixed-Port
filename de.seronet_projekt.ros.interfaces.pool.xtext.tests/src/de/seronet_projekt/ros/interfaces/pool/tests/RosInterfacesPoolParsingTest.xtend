/*
 * generated by Xtext 2.18.0.M3
 */
package de.seronet_projekt.ros.interfaces.pool.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import rosInterfacesPool.RosInterfacesPool

@RunWith(XtextRunner)
@InjectWith(RosInterfacesPoolInjectorProvider)
class RosInterfacesPoolParsingTest {
	@Inject
	ParseHelper<RosInterfacesPool> parseHelper
	
	@Test
	def void loadModel() {
		val result = parseHelper.parse('''
			RosInterfacesPool {
				RosSubscriber _diagnostics { topicName "/diagnostics" type "diagnostic_msgs.DiagnosticArray" }
				RosSubscriber _joy { topicName "/joy" type "sensor_msgs.Joy" }
			}

		''')
		Assert.assertNotNull(result)
		val errors = result.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
	}
	
/** 	@Test 
    def void parseDomainmodel() {
        val model = parseHelper.parse('''
			RosInterfacesPool {
				RosSubscriber _diagnostics { topicName "/diagnostics" type "diagnostic_msgs.DiagnosticArray" }
				RosSubscriber _joy { topicName "/joy" type "sensor_msgs.Joy" }
			}
		''')

        Assert.assertEquals(...)
    }*/
}
